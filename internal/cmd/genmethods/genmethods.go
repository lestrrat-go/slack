package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"

	"github.com/lestrrat-go/slack/internal/codegen"
	"github.com/pkg/errors"
)

func main() {
	if err := _main(); err != nil {
		log.Printf("%s", err)
		os.Exit(1)
	}
}

func isBuiltin(typ string) bool {
	switch typ {
	case "bool", "byte", "complex128", "complex64", "float32", "float64", "int", "int8", "int16", "int32", "int64", "rune", "string", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr":
		return true
	}
	return false
}

func zeroValue(typ string) string {
	switch typ {
	case "bool":
		return "false"
	case "string":
		return `""`
	case "byte", "complex128", "complex64", "float32", "float64", "int", "int8", "int16", "int32", "int64", "rune", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr":
		return "0"
	default:
		return "nil"
	}
}

type stringList []string

func (s *stringList) UnmarshalJSON(data []byte) error {
	if data[0] == '"' {
		var v string
		if err := json.Unmarshal(data, &v); err != nil {
			return errors.Wrap(err, `failed to unmarshal string for stringList`)
		}
		*s = []string{v}
		return nil
	}

	var v []string
	if err := json.Unmarshal(data, &v); err != nil {
		return errors.Wrap(err, `failed to unmarshal string list for stringList`)
	}
	*s = v
	return nil
}

type Endpoint struct {
	file       string
	methodName string
	Group      string     `json:"group,omitempty"`
	Name       string     `json:"name"` // e.g. "chat.PostMessage"
	JSON       stringList `json:"json"`
	Args       []Argument `json:"args,omitempty"`
	ReturnType stringList `json:"return,omitempty"`
	SkipToken  bool       `json:"skip_token,omitempty"`
}

type Argument struct {
	Name      string `json:"name"`
	Type      string `json:"type"`
	Required  bool   `json:"required,omitempty"`
	Default   string `json:"default,omitempty"`
	QueryName string `json:"query_name,omitempty"`
	Comment   string `json:"comment,omitempty"`
}

func camelit(s string) string {
	var buf bytes.Buffer

	var upnext bool
	for i, r := range s {
		if i == 0 || upnext {
			buf.WriteRune(unicode.ToUpper(r))
			upnext = false
			continue
		}

		if r == '.' || r == '_' {
			upnext = true
			continue
		}

		buf.WriteRune(r)
	}
	return buf.String()
}

func _main() error {
	var endpoints []Endpoint
	var objectList []codegen.Object

	{
		fh, err := os.Open("endpoints.json")
		if err != nil {
			return errors.Wrap(err, `failed to open endpoints.json`)
		}

		if err := json.NewDecoder(fh).Decode(&endpoints); err != nil {
			fh.Close()
			return errors.Wrap(err, `failed to decode endpoints.json`)
		}
		fh.Close()
	}

	fh, err := os.Open("objects.json")
	if err != nil {
		return errors.Wrap(err, `failed to open objects.json`)
	}
	defer fh.Close()

	if err := json.NewDecoder(fh).Decode(&objectList); err != nil {
		return errors.Wrap(err, `failed to decode objects.json`)
	}

	objects := make(map[string]codegen.Object)
	for _, object := range objectList {
		objects["objects."+object.Name] = object
	}

	groups := map[string]struct{}{}
	group := map[string][]Endpoint{}
	for _, endpoint := range endpoints {
		i := strings.LastIndexByte(endpoint.Name, '.')
		endpoint.file = strings.Replace(endpoint.Name[:i], ".", "_", -1) + "_gen.go"
		if len(endpoint.Group) == 0 {
			endpoint.Group = camelit(endpoint.Name[:i])
		}
		endpoint.methodName = camelit(endpoint.Name[i+1:])
		group[endpoint.file] = append(group[endpoint.file], endpoint)

		groups[endpoint.Group] = struct{}{}
	}

	if err := generateServicesFile(groups); err != nil {
		return errors.Wrap(err, `failed to generate services file`)
	}

	for fn, endpoints := range group {
		if err := generateServiceDetailsFile(fn, endpoints, objects); err != nil {
			return errors.Wrapf(err, `failed to generate file %s`, fn)
		}
	}
	return nil
}

func generateServicesFile(groups map[string]struct{}) error {
	var list []string
	for k := range groups {
		list = append(list, k)
	}
	sort.Strings(list)

	var buf bytes.Buffer
	fmt.Fprintf(&buf, "package slack")
	fmt.Fprintf(&buf, "\n\n// Auto-generated by internal/cmd/genmethods/genmethods.go. DO NOT EDIT!")
	for _, g := range list {
		fmt.Fprintf(&buf, "\n\n// %sService handles %s related endpoints", g, g)
		fmt.Fprintf(&buf, "\ntype %sService struct {", g)
		fmt.Fprintf(&buf, "\nclient *httpClient")
		fmt.Fprintf(&buf, "\ntoken string")
		fmt.Fprintf(&buf, "\n}")
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		log.Printf("%s", buf.Bytes())
		return errors.Wrap(err, `failed to format code`)
	}

	file := "services.go"
	fh, err := os.Create(file)
	if err != nil {
		return errors.Wrapf(err, `failed to open file %s for writing`, file)
	}
	defer fh.Close()

	fh.Write(formatted)
	return nil
}

func writeZeroReturnValues(dst io.Writer, endpoint *Endpoint) {
	for _, typ := range endpoint.ReturnType {
		fmt.Fprintf(dst, "%s, ", zeroValue(typ))
	}
}

func generateServiceDetailsFile(file string, endpoints []Endpoint, objects map[string]codegen.Object) error {
	sort.Slice(endpoints, func(i, j int) bool {
		return strings.Compare(endpoints[i].Name, endpoints[j].Name) < 0
	})

	var buf bytes.Buffer
	fmt.Fprintf(&buf, "\npackage slack")
	fmt.Fprintf(&buf, "\n\n// Auto-generated by internal/cmd/genmethods/genmethods.go (generateServiceDetailsFile). DO NOT EDIT!")
	fmt.Fprintf(&buf, "\n\nimport (")
	for _, pkg := range []string{"context", "encoding/json", "net/url", "strconv", "strings"} {
		fmt.Fprintf(&buf, "\n%s", strconv.Quote(pkg))
	}
	fmt.Fprintf(&buf, "\n")
	for _, pkg := range []string{"github.com/lestrrat-go/slack/objects", "github.com/pkg/errors"} {
		fmt.Fprintf(&buf, "\n%s", strconv.Quote(pkg))
	}
	fmt.Fprintf(&buf, "\n)")

	fmt.Fprintf(&buf, "\n\nvar _ = strconv.Itoa")
	fmt.Fprintf(&buf, "\nvar _ = strings.Index")
	fmt.Fprintf(&buf, "\nvar _ = json.Marshal")
	fmt.Fprintf(&buf, "\nvar _ = objects.EpochTime(0)")

	for _, endpoint := range endpoints {
		fmt.Fprintf(&buf, "\n// %s%sCall is created by %sService.%s method call", endpoint.Group, endpoint.methodName, endpoint.Group, endpoint.methodName)
		fmt.Fprintf(&buf, "\ntype %s%sCall struct {", endpoint.Group, endpoint.methodName)
		fmt.Fprintf(&buf, "\nservice *%sService", endpoint.Group)
		sort.Slice(endpoint.Args, func(i, j int) bool {
			return strings.Compare(endpoint.Args[i].Name, endpoint.Args[j].Name) < 0
		})

		for _, arg := range endpoint.Args {
			fmt.Fprintf(&buf, "\n%s %s", arg.Name, arg.Type)
			if len(arg.Comment) > 0 {
				fmt.Fprintf(&buf, " // ")
				fmt.Fprintf(&buf, arg.Comment)
			}
		}

		fmt.Fprintf(&buf, "\n}")
	}

	for _, endpoint := range endpoints {
		var requiredArgNames []string
		var requiredArgList []string
		for _, arg := range endpoint.Args {
			if arg.Required {
				requiredArgNames = append(requiredArgNames, arg.Name)
				requiredArgList = append(requiredArgList, arg.Name+" "+arg.Type)
			}
		}

		fmt.Fprintf(&buf, "\n\n// %s creates a %s%sCall object in preparation for accessing the %s endpoint",
			endpoint.methodName, endpoint.Group, endpoint.methodName, endpoint.Name)
		fmt.Fprintf(&buf, "\nfunc (s *%sService) %s(%s) *%s%sCall{", endpoint.Group, endpoint.methodName, strings.Join(requiredArgList, ", "), endpoint.Group, endpoint.methodName)
		fmt.Fprintf(&buf, "\nvar call %s%sCall", endpoint.Group, endpoint.methodName)
		fmt.Fprintf(&buf, "\ncall.service = s")
		for _, arg := range requiredArgNames {
			fmt.Fprintf(&buf, "\ncall.%s = %s", arg, arg)
		}
		fmt.Fprintf(&buf, "\nreturn &call")
		fmt.Fprintf(&buf, "\n}")

		for _, arg := range endpoint.Args {
			if arg.Required {
				continue
			}

			// If the type is *List, then we provide a SetXXX method. Similarly, a
			// singular XXX method is provided as a proxy to append to the list
			if strings.HasSuffix(arg.Type, "List") {
				fmt.Fprintf(&buf, "\n\n// Set%s sets the %s list", camelit(arg.Name), arg.Name)
				fmt.Fprintf(&buf, "\nfunc (c *%s%sCall) Set%s(%s %s) *%s%sCall {",
					endpoint.Group, endpoint.methodName, camelit(arg.Name), arg.Name, arg.Type, endpoint.Group, endpoint.methodName)
				fmt.Fprintf(&buf, "\nc.%s = %s", arg.Name, arg.Name)
				fmt.Fprintf(&buf, "\nreturn c")
				fmt.Fprintf(&buf, "\n}")

				var singularName string // hack
				if strings.HasSuffix(arg.Name, "es") {
					singularName = strings.TrimSuffix(arg.Name, "es")
				} else {
					singularName = strings.TrimSuffix(arg.Name, "s")
				}

				var pointerMark = "*"
				var singularType = strings.TrimSuffix(arg.Type, "List")
				if singularType == "objects.Block" {
					pointerMark = ""
				}

				fmt.Fprintf(&buf, "\n\n// %s appends to the %s list", camelit(singularName), arg.Name)
				fmt.Fprintf(&buf, "\nfunc (c *%s%sCall) %s(%s %s%s) *%s%sCall {",
					endpoint.Group, endpoint.methodName, camelit(singularName), singularName, pointerMark, singularType, endpoint.Group, endpoint.methodName)
				fmt.Fprintf(&buf, "\nc.%s.Append(%s)", arg.Name, singularName)
				fmt.Fprintf(&buf, "\nreturn c")
				fmt.Fprintf(&buf, "\n}")
			} else {
				fmt.Fprintf(&buf, "\n\n// %s sets the value for optional %s parameter", camelit(arg.Name), arg.Name)
				fmt.Fprintf(&buf, "\nfunc (c *%s%sCall) %s(%s %s) *%s%sCall {",
					endpoint.Group, endpoint.methodName, camelit(arg.Name), arg.Name, arg.Type, endpoint.Group, endpoint.methodName)
				fmt.Fprintf(&buf, "\nc.%s = %s", arg.Name, arg.Name)
				fmt.Fprintf(&buf, "\nreturn c")
				fmt.Fprintf(&buf, "\n}")
			}
		}

		type argCheck struct {
			Assign   string
			Prelude  string
			Optional string
			Required string
		}
		checks := map[string]*argCheck{}
		for _, arg := range endpoint.Args {
			var check argCheck
			switch arg.Type {
			case "string":
				check.Assign = fmt.Sprintf("c.%s", arg.Name)
				check.Optional = fmt.Sprintf("\nif len(c.%s) > 0 {", arg.Name)
				check.Required = fmt.Sprintf("\nif len(c.%s) <= 0 {", arg.Name)
			case "bool":
				check.Assign = `"true"`
				check.Optional = fmt.Sprintf("\nif c.%s {", arg.Name)
				check.Required = fmt.Sprintf("\nif !c.%s {", arg.Name)
			case "int":
				check.Assign = fmt.Sprintf(`strconv.Itoa(c.%s)`, arg.Name)
				check.Optional = fmt.Sprintf("\nif c.%s > 0 {", arg.Name)
				check.Required = fmt.Sprintf("\nif c.%s == 0 {", arg.Name)
			default:
				check.Prelude = fmt.Sprintf("\n%[1]sEncoded, err := json.Marshal(c.%[1]s)\nif err != nil {\nreturn nil, errors.Wrap(err, `failed to encode field`)\n}", arg.Name)
				check.Assign = fmt.Sprintf("string(%sEncoded)", arg.Name)
				if strings.HasSuffix(arg.Type, "List") {
					check.Optional = fmt.Sprintf("\nif len(c.%s) > 0 {", arg.Name)
					check.Required = fmt.Sprintf("\nif len(c.%s) <= 0 {", arg.Name)
				} else {
					check.Optional = fmt.Sprintf("\nif c.%s != nil {", arg.Name)
					check.Required = fmt.Sprintf("\nif c.%s == nil {", arg.Name)
				}
			}

			checks[arg.Name] = &check
		}
		fmt.Fprintf(&buf, "\n\n// ValidateArgs checks that all required fields are set in the %s%sCall object", endpoint.Group, endpoint.methodName)
		fmt.Fprintf(&buf, "\nfunc (c *%s%sCall) ValidateArgs() error {", endpoint.Group, endpoint.methodName)
		for _, arg := range endpoint.Args {
			if !arg.Required {
				continue
			}

			check := checks[arg.Name]
			fmt.Fprintf(&buf, check.Required)
			fmt.Fprintf(&buf, "\nreturn errors.New(`required field %s not initialized`)", arg.Name)
			fmt.Fprintf(&buf, "\n}")
		}
		fmt.Fprintf(&buf, "\nreturn nil")
		fmt.Fprintf(&buf, "\n}") // end func ValidateArgs

		fmt.Fprintf(&buf, "\n\n// Values returns the %s%sCall object as url.Values", endpoint.Group, endpoint.methodName)
		fmt.Fprintf(&buf, "\nfunc (c *%s%sCall) Values() (url.Values, error) {", endpoint.Group, endpoint.methodName)
		fmt.Fprintf(&buf, "\nif err := c.ValidateArgs(); err != nil {")
		fmt.Fprintf(&buf, "\nreturn nil, errors.Wrap(err, `failed validation`)")
		fmt.Fprintf(&buf, "\n}") // end if err := c.Validate
		fmt.Fprintf(&buf, "\nv := url.Values{}")
		if !endpoint.SkipToken {
			fmt.Fprintf(&buf, "\nv.Set(`token`, c.service.token)")
		}
		for _, arg := range endpoint.Args {
			check := checks[arg.Name]
			fmt.Fprintf(&buf, "\n")
			if !arg.Required {
				fmt.Fprintf(&buf, check.Optional)
			}
			if len(check.Prelude) > 0 {
				fmt.Fprintf(&buf, check.Prelude)
			}

			var qn = arg.Name
			if len(arg.QueryName) > 0 {
				qn = arg.QueryName
			}
			fmt.Fprintf(&buf, "\nv.Set(%s,%s)", strconv.Quote(qn), check.Assign)

			if !arg.Required {
				fmt.Fprintf(&buf, "\n}")
			}
		}
		fmt.Fprintf(&buf, "\nreturn v, nil")
		fmt.Fprintf(&buf, "\n}")

		var returnType string

		hasReturn := len(endpoint.ReturnType) > 0
		if hasReturn {
			var rtbuf bytes.Buffer

			for i, typ := range endpoint.ReturnType {
				if !isBuiltin(typ) && !strings.HasSuffix(typ, "List") {
					rtbuf.WriteByte('*')
				}
				fmt.Fprintf(&rtbuf, typ)

				if i < len(endpoint.ReturnType)-1 {
					fmt.Fprintf(&rtbuf, ",")
				}
			}
			returnType = rtbuf.String()
		}

		// Because *Call objects need to parse composite structs, we need to
		// jump through hoops.

		fmt.Fprintf(&buf, "\ntype %s%sCallResponse struct {", endpoint.Group, endpoint.methodName)
		// inline fields from objects.GenericResponse
		o := objects["objects.GenericResponse"]
		for _, field := range o.Fields {
			ftyp := field.Type
			if !isBuiltin(ftyp) {
				if strings.HasPrefix(ftyp, "*") {
					ftyp = "*objects." + ftyp[1:]
				} else {
					ftyp = "objects." + ftyp
				}
			}
			fmt.Fprintf(&buf, "\n%s %s `json:%s`", field.GoAccessorName(), ftyp, strconv.Quote(field.Name))
		}

		var payloadCount int

		// We always have a buffer to store the original data
		fmt.Fprintf(&buf, "\nPayload0 json.RawMessage `json:%s`", strconv.Quote("-"))

		// We always keep extra raw JSON buffers so that we can capture
		// named fields
		if hasReturn {
			for i := range endpoint.ReturnType {
				if i < len(endpoint.JSON) {
					if jtyp := endpoint.JSON[i]; len(jtyp) > 0 {
						payloadCount++
						fmt.Fprintf(&buf, "\nPayload%d json.RawMessage `json:%s`", payloadCount, strconv.Quote(jtyp))
					}
				}
			}
		}
		fmt.Fprintf(&buf, "\n}")

		// We create a custom "unmarshal()" method so that we don't recursively call UnmarshalJSON
		fmt.Fprintf(&buf, "\nfunc (r *%s%sCallResponse) parse(data []byte) error {", endpoint.Group, endpoint.methodName)
		fmt.Fprintf(&buf, "\nif err := json.Unmarshal(data, r); err != nil {")
		fmt.Fprintf(&buf, "\nreturn errors.Wrap(err, `failed to unmarshal %s%sCallResponse`)", endpoint.Group, endpoint.methodName)
		fmt.Fprintf(&buf, "\n}")
		fmt.Fprintf(&buf, "\nr.Payload0 = data")
		fmt.Fprintf(&buf, "\nreturn nil")
		fmt.Fprintf(&buf, "\n}")

		if hasReturn {
			fmt.Fprintf(&buf, "\nfunc (r *%s%sCallResponse) payload() (%s, error) {", endpoint.Group, endpoint.methodName, returnType)
			for i, typ := range endpoint.ReturnType {
				if payloadCount == 0 {
					fmt.Fprintf(&buf, "\nvar res%d %s", i, typ)
					fmt.Fprintf(&buf, "\nif err := json.Unmarshal(r.Payload0, &res0); err != nil {")
				} else {
					fmt.Fprintf(&buf, "\nvar res%d %s", i+1, typ)
					fmt.Fprintf(&buf, "\nif err := json.Unmarshal(r.Payload%[1]d, &res%[1]d); err != nil {", i+1)
				}
				fmt.Fprintf(&buf, "\nreturn ")
				for _, typ := range endpoint.ReturnType {
					if !isBuiltin(typ) && !strings.HasSuffix(typ, "List") {
						fmt.Fprintf(&buf, "nil, ")
					} else {
						fmt.Fprintf(&buf, "%s, ", zeroValue(typ))
					}
				}
				fmt.Fprintf(&buf, "errors.Wrap(err, `failed to ummarshal %s from response`)", typ)
				fmt.Fprintf(&buf, "\n}")
			}

			fmt.Fprintf(&buf, "\nreturn ")
			for i, typ := range endpoint.ReturnType {
				if !isBuiltin(typ) && !strings.HasSuffix(typ, "List") {
					fmt.Fprintf(&buf, "&")
				}

				if payloadCount == 0 {
					fmt.Fprintf(&buf, "res%d, ", i)
				} else {
					fmt.Fprintf(&buf, "res%d, ", i+1)
				}
			}
			fmt.Fprintf(&buf, "nil")
			fmt.Fprintf(&buf, "\n}")
		}

		fmt.Fprintf(&buf, "\n// Do executes the call to access %s endpoint", endpoint.Name)
		fmt.Fprintf(&buf, "\nfunc (c *%s%sCall) Do(ctx context.Context) ", endpoint.Group, endpoint.methodName)
		if hasReturn {
			fmt.Fprintf(&buf, "(%s, error)", returnType)
		} else {
			fmt.Fprintf(&buf, "error")
		}
		fmt.Fprintf(&buf, "{")
		fmt.Fprintf(&buf, "\nconst endpoint = %s", strconv.Quote(endpoint.Name))
		fmt.Fprintf(&buf, "\nv, err := c.Values()")
		fmt.Fprintf(&buf, "\nif err != nil {")
		fmt.Fprintf(&buf, "\nreturn ")
		if hasReturn {
			writeZeroReturnValues(&buf, &endpoint)
		}
		fmt.Fprintf(&buf, "err")
		fmt.Fprintf(&buf, "\n}")
		fmt.Fprintf(&buf, "\nvar res %s%sCallResponse", endpoint.Group, endpoint.methodName)
		fmt.Fprintf(&buf, "\nif err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {")
		fmt.Fprintf(&buf, "\nreturn ")
		if hasReturn {
			writeZeroReturnValues(&buf, &endpoint)
		}
		fmt.Fprintf(&buf, "errors.Wrap(err, `failed to post to %s`)", endpoint.Name)
		fmt.Fprintf(&buf, "\n}")

		fmt.Fprintf(&buf, "\nif !res.OK {")
		fmt.Fprintf(&buf, "\nvar err error")
		fmt.Fprintf(&buf, "\nif errresp := res.Error; errresp != nil {")
		fmt.Fprintf(&buf, "\nerr = errors.New(errresp.String())")
		fmt.Fprintf(&buf, "\n} else {")
		fmt.Fprintf(&buf, "\nerr = errors.New(`unknown error while posting to %s`)", endpoint.Name)
		fmt.Fprintf(&buf, "\n}")
		fmt.Fprintf(&buf, "\nreturn ")
		if hasReturn {
			writeZeroReturnValues(&buf, &endpoint)
		}
		fmt.Fprintf(&buf, "err")
		fmt.Fprintf(&buf, "\n}")

		if hasReturn {
			fmt.Fprintf(&buf, "\n\nreturn res.payload()")
		} else {
			fmt.Fprintf(&buf, "\n\nreturn nil")
		}
		fmt.Fprintf(&buf, "\n}")

		fmt.Fprintf(&buf, "\n\n// FromValues parses the data in v and populates `c`")
		fmt.Fprintf(&buf, "\nfunc (c *%s%sCall) FromValues(v url.Values) error {", endpoint.Group, endpoint.methodName)
		fmt.Fprintf(&buf, "\nvar tmp %s%sCall", endpoint.Group, endpoint.methodName)
		for _, arg := range endpoint.Args {
			var qn = arg.Name
			if len(arg.QueryName) > 0 {
				qn = arg.QueryName
			}

			fmt.Fprintf(&buf, "\nif raw := strings.TrimSpace(v.Get(%s)); len(raw) > 0 {", strconv.Quote(qn))
			switch arg.Type {
			case "string":
				fmt.Fprintf(&buf, "\ntmp.%s = raw", arg.Name)
			case "bool":
				fmt.Fprintf(&buf, "\nparsed, err := strconv.ParseBool(raw)")
				fmt.Fprintf(&buf, "\nif err != nil {")
				fmt.Fprintf(&buf, "\nreturn errors.Wrap(err, `failed to parse boolean value %s`)", strconv.Quote(qn))
				fmt.Fprintf(&buf, "\n}") // end if err != nil
				fmt.Fprintf(&buf, "\ntmp.%s = parsed", arg.Name)
			case "int":
				fmt.Fprintf(&buf, "\nparsed, err := strconv.ParseInt(raw, 10, 64)")
				fmt.Fprintf(&buf, "\nif err != nil {")
				fmt.Fprintf(&buf, "\nreturn errors.Wrap(err, `failed to parse integer value %s`)", strconv.Quote(qn))
				fmt.Fprintf(&buf, "\n}") // end if err != nil
				fmt.Fprintf(&buf, "\ntmp.%s = int(parsed)", arg.Name)
			default:
				fmt.Fprintf(&buf, "\nif err := json.Unmarshal([]byte(raw), &tmp.%s); err != nil {", arg.Name)
				fmt.Fprintf(&buf, "\nreturn errors.Wrap(err, `failed to decode value %s`)", strconv.Quote(qn))
				fmt.Fprintf(&buf, "\n}") // end if err != nil
			}
			fmt.Fprintf(&buf, "\n}") // end of if len(raw)
		}
		fmt.Fprintf(&buf, "\n*c = tmp")
		fmt.Fprintf(&buf, "\nreturn nil")
		fmt.Fprintf(&buf, "\n}") // end of FromValues
	}

	return codegen.WriteGoCodeToFile(file, buf.Bytes())
}
