package slack

// Auto-generated by internal/cmd/genmethods/genmethods.go (generateServiceDetailsFile). DO NOT EDIT!

import (
	"context"
	"encoding/json"
	"net/url"
	"strconv"
	"strings"

	"github.com/lestrrat-go/slack/objects"
	"github.com/pkg/errors"
)

var _ = strconv.Itoa
var _ = strings.Index
var _ = json.Marshal
var _ = objects.EpochTime(0)

// BotsInfoCall is created by BotsService.Info method call
type BotsInfoCall struct {
	service *BotsService
	bot     string
}

// Info creates a BotsInfoCall object in preparation for accessing the bots.info endpoint
func (s *BotsService) Info(bot string) *BotsInfoCall {
	var call BotsInfoCall
	call.service = s
	call.bot = bot
	return &call
}

// ValidateArgs checks that all required fields are set in the BotsInfoCall object
func (c *BotsInfoCall) ValidateArgs() error {
	if len(c.bot) <= 0 {
		return errors.New(`required field bot not initialized`)
	}
	return nil
}

// Values returns the BotsInfoCall object as url.Values
func (c *BotsInfoCall) Values() (url.Values, error) {
	if err := c.ValidateArgs(); err != nil {
		return nil, errors.Wrap(err, `failed validation`)
	}
	v := url.Values{}
	v.Set(`token`, c.service.token)

	v.Set("bot", c.bot)
	return v, nil
}

type BotsInfoCallResponse interface {
	OK() bool
	ReplyTo() int
	Error() *objects.ErrorResponse
	Timestamp() string
}

type botsInfoCallResponseProxy struct {
	OK        bool                   `json:"ok"`
	ReplyTo   int                    `json:"reply_to"`
	Error     *objects.ErrorResponse `json:"error"`
	Timestamp string                 `json:"ts"`
	Payload0  json.RawMessage        `json:"-"`
}
type botsInfoCallResponse struct {
	ok      bool
	replyTo int
	error   *objects.ErrorResponse
	ts      string
}
type BotsInfoCallResponseBuilder struct {
	resp *botsInfoCallResponse
}

func BuildBotsInfoCallResponse() *BotsInfoCallResponseBuilder {
	return &BotsInfoCallResponseBuilder{resp: &botsInfoCallResponse{}}
}
func (v *botsInfoCallResponse) OK() bool {
	return v.ok
}
func (v *botsInfoCallResponse) ReplyTo() int {
	return v.replyTo
}
func (v *botsInfoCallResponse) Error() *objects.ErrorResponse {
	return v.error
}
func (v *botsInfoCallResponse) Timestamp() string {
	return v.ts
}
func (b *BotsInfoCallResponseBuilder) OK(v bool) *BotsInfoCallResponseBuilder {
	b.resp.ok = v
	return b
}
func (b *BotsInfoCallResponseBuilder) ReplyTo(v int) *BotsInfoCallResponseBuilder {
	b.resp.replyTo = v
	return b
}
func (b *BotsInfoCallResponseBuilder) Error(v *objects.ErrorResponse) *BotsInfoCallResponseBuilder {
	b.resp.error = v
	return b
}
func (b *BotsInfoCallResponseBuilder) Timestamp(v string) *BotsInfoCallResponseBuilder {
	b.resp.ts = v
	return b
}
func (b *BotsInfoCallResponseBuilder) Build() BotsInfoCallResponse {
	v := b.resp
	b.resp = &botsInfoCallResponse{}
	return v
}
func (r *botsInfoCallResponseProxy) parse(data []byte) error {
	if err := json.Unmarshal(data, r); err != nil {
		return errors.Wrap(err, `failed to unmarshal BotsInfoCallResponse`)
	}
	r.Payload0 = data
	return nil
}
func (r *botsInfoCallResponseProxy) payload() (*objects.Bot, error) {
	var res0 objects.Bot
	if err := json.Unmarshal(r.Payload0, &res0); err != nil {
		return nil, errors.Wrap(err, `failed to ummarshal objects.Bot from response`)
	}
	return &res0, nil
}

// Do executes the call to access bots.info endpoint
func (c *BotsInfoCall) Do(ctx context.Context) (*objects.Bot, error) {
	const endpoint = "bots.info"
	v, err := c.Values()
	if err != nil {
		return nil, err
	}
	var res botsInfoCallResponseProxy
	if err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {
		return nil, errors.Wrap(err, `failed to post to bots.info`)
	}
	if !res.OK {
		var err error
		if errresp := res.Error; errresp != nil {
			err = errors.New(errresp.String())
		} else {
			err = errors.New(`unknown error while posting to bots.info`)
		}
		return nil, err
	}

	return res.payload()
}

// FromValues parses the data in v and populates `c`
func (c *BotsInfoCall) FromValues(v url.Values) error {
	var tmp BotsInfoCall
	if raw := strings.TrimSpace(v.Get("bot")); len(raw) > 0 {
		tmp.bot = raw
	}
	*c = tmp
	return nil
}
