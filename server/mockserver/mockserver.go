package mockserver

// Auto-generated by internal/cmd/genserver/genserver.go. DO NOT EDIT!

import (
	"bytes"
	"encoding/json"
	"net/http"
	"strconv"
	"sync"
	"time"

	"github.com/lestrrat-go/slack"
	"github.com/lestrrat-go/slack/objects"
	"github.com/lestrrat-go/slack/server"
)

type Handler struct {
	muTokens sync.RWMutex
	tokens   map[string]struct{}
}

type Option interface {
	Name() string
	Value() interface{}
}

type option struct {
	name  string
	value interface{}
}

func (o *option) Name() string {
	return o.name
}

func (o *option) Value() interface{} {
	return o.value
}

const (
	optTokenKey = `token`
)

func WithToken(s string) Option {
	return &option{
		name:  optTokenKey,
		value: s,
	}
}

// New creates a new mock Slack API Handler object. You may pass optional
// parameters, which can be one of the following:
//
// `mockserver.WithToken(string)`: specifies the token to accept. Multiple
// tokens may be specified, and given any one of them, the server will
// accept the request.
func New(options ...Option) *Handler {
	tokens := make(map[string]struct{})
	for _, option := range options {
		switch option.Name() {
		case optTokenKey:
			tokens[option.Value().(string)] = struct{}{}
		}
	}
	return &Handler{
		tokens: tokens,
	}
}

func (h *Handler) validateToken(r *http.Request) bool {
	if len(h.tokens) == 0 { // only check token if specified to do so
		return true
	}
	token := r.FormValue(`token`)

	if len(token) == 0 {
		return false
	}

	_, ok := h.tokens[token]
	return ok
}

func (h *Handler) InstallHandlers(s *server.Server) {
	s.Handle("auth.revoke", http.HandlerFunc(h.HandleAuthRevoke))
	s.Handle("auth.test", http.HandlerFunc(h.HandleAuthTest))
	s.Handle("bots.info", http.HandlerFunc(h.HandleBotsInfo))
	s.Handle("channels.archive", http.HandlerFunc(h.HandleChannelsArchive))
	s.Handle("channels.create", http.HandlerFunc(h.HandleChannelsCreate))
	s.Handle("channels.history", http.HandlerFunc(h.HandleChannelsHistory))
	s.Handle("channels.info", http.HandlerFunc(h.HandleChannelsInfo))
	s.Handle("channels.invite", http.HandlerFunc(h.HandleChannelsInvite))
	s.Handle("channels.join", http.HandlerFunc(h.HandleChannelsJoin))
	s.Handle("channels.kick", http.HandlerFunc(h.HandleChannelsKick))
	s.Handle("channels.leave", http.HandlerFunc(h.HandleChannelsLeave))
	s.Handle("channels.list", http.HandlerFunc(h.HandleChannelsList))
	s.Handle("channels.mark", http.HandlerFunc(h.HandleChannelsMark))
	s.Handle("channels.rename", http.HandlerFunc(h.HandleChannelsRename))
	s.Handle("channels.replies", http.HandlerFunc(h.HandleChannelsReplies))
	s.Handle("channels.setPurpose", http.HandlerFunc(h.HandleChannelsSetPurpose))
	s.Handle("channels.setTopic", http.HandlerFunc(h.HandleChannelsSetTopic))
	s.Handle("channels.unarchive", http.HandlerFunc(h.HandleChannelsUnarchive))
	s.Handle("chat.delete", http.HandlerFunc(h.HandleChatDelete))
	s.Handle("chat.getPermalink", http.HandlerFunc(h.HandleChatGetPermalink))
	s.Handle("chat.meMessage", http.HandlerFunc(h.HandleChatMeMessage))
	s.Handle("chat.postEphemeral", http.HandlerFunc(h.HandleChatPostEphemeral))
	s.Handle("chat.postMessage", http.HandlerFunc(h.HandleChatPostMessage))
	s.Handle("chat.unfurl", http.HandlerFunc(h.HandleChatUnfurl))
	s.Handle("chat.update", http.HandlerFunc(h.HandleChatUpdate))
	s.Handle("dialog.open", http.HandlerFunc(h.HandleDialogOpen))
	s.Handle("emoji.list", http.HandlerFunc(h.HandleEmojiList))
	s.Handle("groups.archive", http.HandlerFunc(h.HandleGroupsArchive))
	s.Handle("groups.create", http.HandlerFunc(h.HandleGroupsCreate))
	s.Handle("groups.createChild", http.HandlerFunc(h.HandleGroupsCreateChild))
	s.Handle("groups.history", http.HandlerFunc(h.HandleGroupsHistory))
	s.Handle("groups.info", http.HandlerFunc(h.HandleGroupsInfo))
	s.Handle("groups.invite", http.HandlerFunc(h.HandleGroupsInvite))
	s.Handle("groups.kick", http.HandlerFunc(h.HandleGroupsKick))
	s.Handle("groups.leave", http.HandlerFunc(h.HandleGroupsLeave))
	s.Handle("groups.list", http.HandlerFunc(h.HandleGroupsList))
	s.Handle("groups.mark", http.HandlerFunc(h.HandleGroupsMark))
	s.Handle("groups.open", http.HandlerFunc(h.HandleGroupsOpen))
	s.Handle("groups.rename", http.HandlerFunc(h.HandleGroupsRename))
	s.Handle("groups.replies", http.HandlerFunc(h.HandleGroupsReplies))
	s.Handle("groups.setPurpose", http.HandlerFunc(h.HandleGroupsSetPurpose))
	s.Handle("groups.setTopic", http.HandlerFunc(h.HandleGroupsSetTopic))
	s.Handle("groups.unarchive", http.HandlerFunc(h.HandleGroupsUnarchive))
	s.Handle("oauth.access", http.HandlerFunc(h.HandleOAuthAccess))
	s.Handle("reactions.add", http.HandlerFunc(h.HandleReactionsAdd))
	s.Handle("reactions.get", http.HandlerFunc(h.HandleReactionsGet))
	s.Handle("reactions.list", http.HandlerFunc(h.HandleReactionsList))
	s.Handle("reactions.remove", http.HandlerFunc(h.HandleReactionsRemove))
	s.Handle("reminders.add", http.HandlerFunc(h.HandleRemindersAdd))
	s.Handle("reminders.complete", http.HandlerFunc(h.HandleRemindersComplete))
	s.Handle("reminders.delete", http.HandlerFunc(h.HandleRemindersDelete))
	s.Handle("reminders.info", http.HandlerFunc(h.HandleRemindersInfo))
	s.Handle("reminders.list", http.HandlerFunc(h.HandleRemindersList))
	s.Handle("rtm.start", http.HandlerFunc(h.HandleRTMStart))
	s.Handle("usergroups.create", http.HandlerFunc(h.HandleUsergroupsCreate))
	s.Handle("usergroups.disable", http.HandlerFunc(h.HandleUsergroupsDisable))
	s.Handle("usergroups.enable", http.HandlerFunc(h.HandleUsergroupsEnable))
	s.Handle("usergroups.list", http.HandlerFunc(h.HandleUsergroupsList))
	s.Handle("usergroups.update", http.HandlerFunc(h.HandleUsergroupsUpdate))
	s.Handle("usergroups.users.list", http.HandlerFunc(h.HandleUsergroupsUsersList))
	s.Handle("usergroups.users.update", http.HandlerFunc(h.HandleUsergroupsUsersUpdate))
	s.Handle("users.deletePhoto", http.HandlerFunc(h.HandleUsersDeletePhoto))
	s.Handle("users.getPresence", http.HandlerFunc(h.HandleUsersGetPresence))
	s.Handle("users.identity", http.HandlerFunc(h.HandleUsersIdentity))
	s.Handle("users.info", http.HandlerFunc(h.HandleUsersInfo))
	s.Handle("users.list", http.HandlerFunc(h.HandleUsersList))
	s.Handle("users.lookupByEmail", http.HandlerFunc(h.HandleUsersLookupByEmail))
	s.Handle("users.profile.get", http.HandlerFunc(h.HandleUsersProfileGet))
	s.Handle("users.profile.set", http.HandlerFunc(h.HandleUsersProfileSet))
	s.Handle("users.setActive", http.HandlerFunc(h.HandleUsersSetActive))
	s.Handle("users.setPresence", http.HandlerFunc(h.HandleUsersSetPresence))
}

// HandleAuthRevoke is the default handler method for the Slack auth.revoke API
func (h *Handler) HandleAuthRevoke(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.AuthRevokeCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("auth.revoke")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleAuthTest is the default handler method for the Slack auth.test API
func (h *Handler) HandleAuthTest(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.AuthTestCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("auth.test")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleBotsInfo is the default handler method for the Slack bots.info API
func (h *Handler) HandleBotsInfo(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.BotsInfoCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("bots.info")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsArchive is the default handler method for the Slack channels.archive API
func (h *Handler) HandleChannelsArchive(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsArchiveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.archive")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsCreate is the default handler method for the Slack channels.create API
func (h *Handler) HandleChannelsCreate(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsCreateCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.create")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsHistory is the default handler method for the Slack channels.history API
func (h *Handler) HandleChannelsHistory(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsHistoryCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.history")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsInfo is the default handler method for the Slack channels.info API
func (h *Handler) HandleChannelsInfo(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsInfoCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.info")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsInvite is the default handler method for the Slack channels.invite API
func (h *Handler) HandleChannelsInvite(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsInviteCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.invite")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsJoin is the default handler method for the Slack channels.join API
func (h *Handler) HandleChannelsJoin(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsJoinCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.join")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsKick is the default handler method for the Slack channels.kick API
func (h *Handler) HandleChannelsKick(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsKickCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.kick")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsLeave is the default handler method for the Slack channels.leave API
func (h *Handler) HandleChannelsLeave(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsLeaveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.leave")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsList is the default handler method for the Slack channels.list API
func (h *Handler) HandleChannelsList(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.list")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsMark is the default handler method for the Slack channels.mark API
func (h *Handler) HandleChannelsMark(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsMarkCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.mark")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsRename is the default handler method for the Slack channels.rename API
func (h *Handler) HandleChannelsRename(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsRenameCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.rename")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsReplies is the default handler method for the Slack channels.replies API
func (h *Handler) HandleChannelsReplies(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsRepliesCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.replies")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsSetPurpose is the default handler method for the Slack channels.setPurpose API
func (h *Handler) HandleChannelsSetPurpose(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsSetPurposeCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.setPurpose")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsSetTopic is the default handler method for the Slack channels.setTopic API
func (h *Handler) HandleChannelsSetTopic(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsSetTopicCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.setTopic")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsUnarchive is the default handler method for the Slack channels.unarchive API
func (h *Handler) HandleChannelsUnarchive(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChannelsUnarchiveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("channels.unarchive")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChatDelete is the default handler method for the Slack chat.delete API
func (h *Handler) HandleChatDelete(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChatDeleteCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("chat.delete")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChatGetPermalink is the default handler method for the Slack chat.getPermalink API
func (h *Handler) HandleChatGetPermalink(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChatGetPermalinkCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("chat.getPermalink")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChatMeMessage is the default handler method for the Slack chat.meMessage API
func (h *Handler) HandleChatMeMessage(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChatMeMessageCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("chat.meMessage")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChatPostEphemeral is the default handler method for the Slack chat.postEphemeral API
func (h *Handler) HandleChatPostEphemeral(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChatPostEphemeralCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("chat.postEphemeral")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChatPostMessage is the default handler method for the Slack chat.postMessage API
func (h *Handler) HandleChatPostMessage(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChatPostMessageCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("chat.postMessage")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChatUnfurl is the default handler method for the Slack chat.unfurl API
func (h *Handler) HandleChatUnfurl(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChatUnfurlCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("chat.unfurl")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChatUpdate is the default handler method for the Slack chat.update API
func (h *Handler) HandleChatUpdate(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ChatUpdateCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("chat.update")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleDialogOpen is the default handler method for the Slack dialog.open API
func (h *Handler) HandleDialogOpen(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.DialogOpenCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("dialog.open")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleEmojiList is the default handler method for the Slack emoji.list API
func (h *Handler) HandleEmojiList(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.EmojiListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("emoji.list")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsArchive is the default handler method for the Slack groups.archive API
func (h *Handler) HandleGroupsArchive(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsArchiveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.archive")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsCreate is the default handler method for the Slack groups.create API
func (h *Handler) HandleGroupsCreate(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsCreateCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.create")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsCreateChild is the default handler method for the Slack groups.createChild API
func (h *Handler) HandleGroupsCreateChild(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsCreateChildCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.createChild")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsHistory is the default handler method for the Slack groups.history API
func (h *Handler) HandleGroupsHistory(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsHistoryCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.history")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsInfo is the default handler method for the Slack groups.info API
func (h *Handler) HandleGroupsInfo(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsInfoCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.info")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsInvite is the default handler method for the Slack groups.invite API
func (h *Handler) HandleGroupsInvite(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsInviteCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.invite")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsKick is the default handler method for the Slack groups.kick API
func (h *Handler) HandleGroupsKick(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsKickCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.kick")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsLeave is the default handler method for the Slack groups.leave API
func (h *Handler) HandleGroupsLeave(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsLeaveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.leave")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsList is the default handler method for the Slack groups.list API
func (h *Handler) HandleGroupsList(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.list")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsMark is the default handler method for the Slack groups.mark API
func (h *Handler) HandleGroupsMark(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsMarkCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.mark")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsOpen is the default handler method for the Slack groups.open API
func (h *Handler) HandleGroupsOpen(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsOpenCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.open")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsRename is the default handler method for the Slack groups.rename API
func (h *Handler) HandleGroupsRename(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsRenameCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.rename")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsReplies is the default handler method for the Slack groups.replies API
func (h *Handler) HandleGroupsReplies(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsRepliesCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.replies")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsSetPurpose is the default handler method for the Slack groups.setPurpose API
func (h *Handler) HandleGroupsSetPurpose(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsSetPurposeCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.setPurpose")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsSetTopic is the default handler method for the Slack groups.setTopic API
func (h *Handler) HandleGroupsSetTopic(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsSetTopicCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.setTopic")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsUnarchive is the default handler method for the Slack groups.unarchive API
func (h *Handler) HandleGroupsUnarchive(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.GroupsUnarchiveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("groups.unarchive")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleOAuthAccess is the default handler method for the Slack oauth.access API
func (h *Handler) HandleOAuthAccess(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var c slack.OAuthAccessCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("oauth.access")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleReactionsAdd is the default handler method for the Slack reactions.add API
func (h *Handler) HandleReactionsAdd(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ReactionsAddCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("reactions.add")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleReactionsGet is the default handler method for the Slack reactions.get API
func (h *Handler) HandleReactionsGet(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ReactionsGetCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("reactions.get")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleReactionsList is the default handler method for the Slack reactions.list API
func (h *Handler) HandleReactionsList(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ReactionsListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("reactions.list")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleReactionsRemove is the default handler method for the Slack reactions.remove API
func (h *Handler) HandleReactionsRemove(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.ReactionsRemoveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("reactions.remove")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleRemindersAdd is the default handler method for the Slack reminders.add API
func (h *Handler) HandleRemindersAdd(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.RemindersAddCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("reminders.add")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleRemindersComplete is the default handler method for the Slack reminders.complete API
func (h *Handler) HandleRemindersComplete(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.RemindersCompleteCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("reminders.complete")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleRemindersDelete is the default handler method for the Slack reminders.delete API
func (h *Handler) HandleRemindersDelete(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.RemindersDeleteCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("reminders.delete")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleRemindersInfo is the default handler method for the Slack reminders.info API
func (h *Handler) HandleRemindersInfo(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.RemindersInfoCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("reminders.info")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleRemindersList is the default handler method for the Slack reminders.list API
func (h *Handler) HandleRemindersList(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.RemindersListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("reminders.list")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleRTMStart is the default handler method for the Slack rtm.start API
func (h *Handler) HandleRTMStart(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.RTMStartCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("rtm.start")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsCreate is the default handler method for the Slack usergroups.create API
func (h *Handler) HandleUsergroupsCreate(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsergroupsCreateCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("usergroups.create")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsDisable is the default handler method for the Slack usergroups.disable API
func (h *Handler) HandleUsergroupsDisable(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsergroupsDisableCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("usergroups.disable")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsEnable is the default handler method for the Slack usergroups.enable API
func (h *Handler) HandleUsergroupsEnable(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsergroupsEnableCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("usergroups.enable")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsList is the default handler method for the Slack usergroups.list API
func (h *Handler) HandleUsergroupsList(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsergroupsListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("usergroups.list")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsUpdate is the default handler method for the Slack usergroups.update API
func (h *Handler) HandleUsergroupsUpdate(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsergroupsUpdateCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("usergroups.update")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsUsersList is the default handler method for the Slack usergroups.users.list API
func (h *Handler) HandleUsergroupsUsersList(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsergroupsUsersListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("usergroups.users.list")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsUsersUpdate is the default handler method for the Slack usergroups.users.update API
func (h *Handler) HandleUsergroupsUsersUpdate(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsergroupsUsersUpdateCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("usergroups.users.update")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersDeletePhoto is the default handler method for the Slack users.deletePhoto API
func (h *Handler) HandleUsersDeletePhoto(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsersDeletePhotoCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("users.deletePhoto")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersGetPresence is the default handler method for the Slack users.getPresence API
func (h *Handler) HandleUsersGetPresence(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsersGetPresenceCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("users.getPresence")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersIdentity is the default handler method for the Slack users.identity API
func (h *Handler) HandleUsersIdentity(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsersIdentityCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("users.identity")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersInfo is the default handler method for the Slack users.info API
func (h *Handler) HandleUsersInfo(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsersInfoCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("users.info")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersList is the default handler method for the Slack users.list API
func (h *Handler) HandleUsersList(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsersListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("users.list")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersLookupByEmail is the default handler method for the Slack users.lookupByEmail API
func (h *Handler) HandleUsersLookupByEmail(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsersLookupByEmailCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("users.lookupByEmail")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersProfileGet is the default handler method for the Slack users.profile.get API
func (h *Handler) HandleUsersProfileGet(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsersProfileGetCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("users.profile.get")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersProfileSet is the default handler method for the Slack users.profile.set API
func (h *Handler) HandleUsersProfileSet(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsersProfileSetCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("users.profile.set")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersSetActive is the default handler method for the Slack users.setActive API
func (h *Handler) HandleUsersSetActive(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsersSetActiveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("users.setActive")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersSetPresence is the default handler method for the Slack users.setPresence API
func (h *Handler) HandleUsersSetPresence(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	if !h.validateToken(r) {
		http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)
		return
	}
	var c slack.UsersSetPresenceCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockResponse("users.setPresence")); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		return
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

func StockResponse(method string) interface{} {
	switch method {
	case "auth.test":
		return stockObjectsAuthTestResponse()
	case "bots.info":
		return stockObjectsBot()
	case "channels.info", "channels.invite", "channels.join", "channels.rename":
		return stockObjectsChannel()
	case "channels.list":
		return stockObjectsChannelList()
	case "channels.history":
		return stockObjectsChannelsHistoryResponse()
	case "chat.delete", "chat.meMessage", "chat.postMessage", "chat.update":
		return stockObjectsChatResponse()
	case "dialog.open":
		return stockObjectsDialogResponse()
	case "emoji.list":
		return stockObjectsEmojiListResponse()
	case "chat.postEphemeral":
		return stockObjectsEphemeralResponse()
	case "groups.create", "groups.createChild", "groups.info", "groups.rename":
		return stockObjectsGroup()
	case "groups.invite":
		return stockObjectsGroupBool()
	case "groups.list":
		return stockObjectsGroupList()
	case "channels.replies":
		return stockObjectsMessageList()
	case "groups.replies":
		return stockObjectsMessageListObjectsThreadInfo()
	case "oauth.access":
		return stockObjectsOAuthAccessResponse()
	case "chat.getPermalink":
		return stockObjectsPermalinkResponse()
	case "rtm.start":
		return stockObjectsRTMResponse()
	case "reactions.get":
		return stockObjectsReactionsGetResponse()
	case "reactions.list":
		return stockObjectsReactionsListResponse()
	case "reminders.add", "reminders.info":
		return stockObjectsReminder()
	case "reminders.list":
		return stockObjectsReminderList()
	case "users.info", "users.lookupByEmail":
		return stockObjectsUser()
	case "users.list":
		return stockObjectsUserList()
	case "users.getPresence":
		return stockObjectsUserPresence()
	case "users.profile.get", "users.profile.set":
		return stockObjectsUserProfile()
	case "users.identity":
		return stockObjectsUserProfileObjectsTeam()
	case "usergroups.create", "usergroups.disable", "usergroups.enable", "usergroups.update", "usergroups.users.update":
		return stockObjectsUsergroup()
	case "usergroups.list":
		return stockObjectsUsergroupList()
	case "usergroups.users.list":
		return stockObjectsUsergroupUsersList()
	case "channels.setPurpose", "channels.setTopic", "groups.setPurpose", "groups.setTopic":
		return stockString()
	case "groups.history":
		return stockStringObjectsMessageList()
	default:
		return objects.BuildGenericResponse().
			OK(true).
			Timestamp(strconv.FormatInt(time.Now().Unix(), 10)).
			MustBuild()
	}
}
